Authors:

Chase Hawthorne
Sanju George Sam
Trevor Stubblefield
Santanu Dey

########################################################################################################################################

Goal: Using spark to train validate test a neural network based non liner regression model to predict household global power consumption
at minutes of days.

Our dataset:

Time Series Power Comsumption Data:
Data Size: 1114MB over 2075259 samples

Fields: Date;Time;Global_active_power;Global_reactive_power;Voltage;Global_intensity;Sub_metering_1;Sub_metering_2;Sub_metering_3;Sub_metering_4;Sub_metering_5;Sub_metering_6;Sub_metering_6;Sub_metering_8;Sub_metering_9;Sub_metering_10;Sub_metering_11;Sub_metering_12;Custom ASCII Field


Methodolgy:
1. Uniformly distribute input data samples amongst 5 buckets
2. Parttion each bucket of data into 5 folds after randomly shuffling the samples.
3. Treating each each of the 5 folds as test set, consider 1  other amongst the remaining 4 as validation set  and final remaining 3 folds as combined training set.
4. Bootstrap neural network  with specified hidden layers architecture and train it using the training set from 4 above. Use the trained model to validate against the validation set.
   Calculate RMSE error for each validation set.
5. Repeat 3,4,5 for each choice of 1 validation set for this test fold made in 3. And find minimum of validation RMSEs for the 4 validation sets.
6. Use the trained network with minimum validation RMSE to test against the test set.
7. Repeat this for each choice of test fold - basically repeat 3, 4, 5, 6 and report the minimum validatin error, test error and hidden layers architecture for the network.
8. Parrallely the process for each of the buckets  happens.


Here is  a sample output from a series of netural network models and their corresponding errors from our spark run with chosen hidden layers arch of  10, 2 and 10 units in the 1st, 2nd and 3rd layer resectively:

[{'bestNetworkForTheFold': {'neuralnetwork': Network(7, [10, 2, 10], 1)
   Network was trained for 101 iterations. Final error is 0.04077386201092966.}, 'testFoldError': 0.12591348945277517, 'testFoldNumber': 0, 'minValidationError': 0.038884842694864925}, {'bestNetworkForTheFold': {'neuralnetwork': Network(7, [10, 2, 10], 1)
   Network was trained for 101 iterations. Final error is 0.04077386201092966.}, 'testFoldError': 0.038884842694864925, 'testFoldNumber': 1, 'minValidationError': 0.038884842694864925}, {'bestNetworkForTheFold': {'neuralnetwork': Network(7, [10, 2, 10], 1)
   Network was trained for 101 iterations. Final error is 0.04077386201092966.}, 'testFoldError': 0.045393039456517133, 'testFoldNumber': 2, 'minValidationError': 0.038884842694864925}, {'bestNetworkForTheFold': {'neuralnetwork': Network(7, [10, 2, 10], 1)
   Network was trained for 101 iterations. Final error is 0.04077386201092966.}, 'testFoldError': 0.037780767534511664, 'testFoldNumber': 3, 'minValidationError': 0.038884842694864925}, {'bestNetworkForTheFold': {'neuralnetwork': Network(7, [10, 2, 10], 1)
   Network was trained for 101 iterations. Final error is 0.046254124103755685.}, 'testFoldError': 0.090959271634323852, 'testFoldNumber': 4, 'minValidationError': 0.038354440727095949}]
[{'bestNetworkForTheFold': {'neuralnetwork': Network(7, [10, 2, 10], 1)
   Network was trained for 101 iterations. Final error is 0.043356733643999786.}, 'testFoldError': 0.090068998533840774, 'testFoldNumber': 0, 'minValidationError': 0.049536622852317067}, {'bestNetworkForTheFold': {'neuralnetwork': Network(7, [10, 2, 10], 1)
   Network was trained for 101 iterations. Final error is 0.043356733643999786.}, 'testFoldError': 0.043624233331999489, 'testFoldNumber': 1, 'minValidationError': 0.049536622852317067}, {'bestNetworkForTheFold': {'neuralnetwork': Network(7, [10, 2, 10], 1)
   Network was trained for 101 iterations. Final error is 0.04681004413307004.}, 'testFoldError': 0.049536932237904001, 'testFoldNumber': 2, 'minValidationError': 0.048134995291588933}, {'bestNetworkForTheFold': {'neuralnetwork': Network(7, [10, 2, 10], 1)
   Network was trained for 101 iterations. Final error is 0.04681004413307004.}, 'testFoldError': 0.048134995291588933, 'testFoldNumber': 3, 'minValidationError': 0.048134995291588933}, {'bestNetworkForTheFold': {'neuralnetwork': Network(7, [10, 2, 10], 1)
   Network was trained for 101 iterations. Final error is 0.04061435422644191.}, 'testFoldError': 0.097550253721825811, 'testFoldNumber': 4, 'minValidationError': 0.030981273044385586}]
[{'bestNetworkForTheFold': {'neuralnetwork': Network(7, [10, 2, 10], 1)
   Network was trained for 101 iterations. Final error is 0.04077300424592137.}, 'testFoldError': 0.088156037987720273, 'testFoldNumber': 0, 'minValidationError': 0.064598229009924638}, {'bestNetworkForTheFold': {'neuralnetwork': Network(7, [10, 2, 10], 1)
   Network was trained for 101 iterations. Final error is 0.05126880846701187.}, 'testFoldError': 0.074821816056025212, 'testFoldNumber': 1, 'minValidationError': 0.056268596353380287}, {'bestNetworkForTheFold': {'neuralnetwork': Network(7, [10, 2, 10], 1)
   Network was trained for 101 iterations. Final error is 0.05126880846701187.}, 'testFoldError': 0.056268596353380287, 'testFoldNumber': 2, 'minValidationError': 0.056268596353380287}, {'bestNetworkForTheFold': {'neuralnetwork': Network(7, [10, 2, 10], 1)
   Network was trained for 101 iterations. Final error is 0.05126880846701187.}, 'testFoldError': 0.051455864943432121, 'testFoldNumber': 3, 'minValidationError': 0.056268596353380287}, {'bestNetworkForTheFold': {'neuralnetwork': Network(7, [10, 2, 10], 1)
   Network was trained for 101 iterations. Final error is 0.04393376677286373.}, 'testFoldError': 0.13071246795330152, 'testFoldNumber': 4, 'minValidationError': 0.041223301899492693}]
[{'bestNetworkForTheFold': {'neuralnetwork': Network(7, [10, 2, 10], 1)
   Network was trained for 101 iterations. Final error is 0.047599766751258994.}, 'testFoldError': 0.093424079222515374, 'testFoldNumber': 0, 'minValidationError': 0.043655620019365238}, {'bestNetworkForTheFold': {'neuralnetwork': Network(7, [10, 2, 10], 1)
   Network was trained for 101 iterations. Final error is 0.047599766751258994.}, 'testFoldError': 0.045767619749106168, 'testFoldNumber': 1, 'minValidationError': 0.043655620019365238}, {'bestNetworkForTheFold': {'neuralnetwork': Network(7, [10, 2, 10], 1)
   Network was trained for 101 iterations. Final error is 0.047599766751258994.}, 'testFoldError': 0.043655620019365238, 'testFoldNumber': 2, 'minValidationError': 0.043655620019365238}, {'bestNetworkForTheFold': {'neuralnetwork': Network(7, [10, 2, 10], 1)
   Network was trained for 101 iterations. Final error is 0.047599766751258994.}, 'testFoldError': 0.050232145254341068, 'testFoldNumber': 3, 'minValidationError': 0.043655620019365238}, {'bestNetworkForTheFold': {'neuralnetwork': Network(7, [10, 2, 10], 1)
   Network was trained for 101 iterations. Final error is 0.051517665009168274.}, 'testFoldError': 0.12500642505774773, 'testFoldNumber': 4, 'minValidationError': 0.040394604039258486}]
[{'bestNetworkForTheFold': {'neuralnetwork': Network(7, [10, 2, 10], 1)
   Network was trained for 101 iterations. Final error is 0.043338607328849005.}, 'testFoldError': 0.094572881100406528, 'testFoldNumber': 0, 'minValidationError': 0.05948460601459199}, {'bestNetworkForTheFold': {'neuralnetwork': Network(7, [10, 2, 10], 1)
   Network was trained for 101 iterations. Final error is 0.043338607328849005.}, 'testFoldError': 0.044390239439247851, 'testFoldNumber': 1, 'minValidationError': 0.05948460601459199}, {'bestNetworkForTheFold': {'neuralnetwork': Network(7, [10, 2, 10], 1)
   Network was trained for 101 iterations. Final error is 0.043338607328849005.}, 'testFoldError': 0.03951637999487112, 'testFoldNumber': 2, 'minValidationError': 0.05948460601459199}, {'bestNetworkForTheFold': {'neuralnetwork': Network(7, [10, 2, 10], 1)
   Network was trained for 101 iterations. Final error is 0.04910092279227956.}, 'testFoldError': 0.064663600674017413, 'testFoldNumber': 3, 'minValidationError': 0.052740336165212995}, {'bestNetworkForTheFold': {'neuralnetwork': Network(7, [10, 2, 10], 1)
   Network was trained for 101 iterations. Final error is 0.04910092279227956.}, 'testFoldError': 0.076625946916463836, 'testFoldNumber': 4, 'minValidationError': 0.052740336165212995}]

Our most accurate model was the 3rd, with a 0.04077300424592137 error.

########################################################################################################################################

Source files:

train.py:

The pysark driver.

This file maps the data from our input on HDFS, reduces it into a more usable form, and divides the data into 5 different buckets. 
Uses the trainValidateTestKFolds() function to accomplish the training, validation and testing of models.  The ouput from this repeated runs of the train validate, test is is then written back to our HDFS cluster. 

network.py:
        The neural network class with methods such as init, train, use etc.

scg.py:
	The implementation of scaled conjugate gradient descent used by our implementation of neural network train function. 

run.sh: 
	A helper script for running our spark job in yarn.
